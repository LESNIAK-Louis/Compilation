package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.expressions.operateurs.* ;
import zoot.arbre.instructions.* ;
import zoot.tds.* ;
import zoot.types.* ;
import zoot.exceptions.*;
import zoot.Programme;
import java.util.ArrayList;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    VARIABLES, FONCTIONS, PAR_OUVR, PAR_FERM, DEBUT, FIN, POINTVIRGULE, VIRGULE, ECRIRE, RETOURNER, ENTIER, BOOL, EQUAL, PLUS, MULT, MOINS, ET, OU, NON, DOUBLEEQUAL, DIFF, INF, SI, ALORS, SINON, FINSI, REPETER, JUSQUA, FINREPETER ;
terminal String    CSTENTIERE, CSTBOOL, IDF ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, LINSTVIDE, LFONC, FONC;
non terminal ArrayList<SymboleVariable> LVARLOC, LVAR, PARAM ;
non terminal ArrayList<Expression> LEXP, PAR_EFF ;
non terminal Instruction INST ;
non terminal Expression EXP ;
non terminal SymboleVariable VAR ;
non terminal Type TYPE;

precedence left OU;
precedence left ET;
precedence left DIFF;
precedence left DOUBLEEQUAL;
precedence left INF;
precedence left PLUS;
precedence left MULT;
precedence left MOINS;
precedence left NON;
precedence left PAR_OUVR, PAR_FERM;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     VARIABLES  LVAR  FONCTIONS  LFONC  DEBUT  LINST:li  FIN
                {:
                    //TDS.getInstance().entreeBloc();
                    RESULT = li ;
                    TDS.getInstance().sortieBloc();
                :}
                ;

TYPE    ::=     ENTIER
                {: Type t = new Entier();
                   RESULT = t; :}
        |
                BOOL
                {: Type t = new Booleen();
                   RESULT = t; :}
                ;

LVAR    ::=     LVAR:lv  VAR:v
                {: ((ArrayList<SymboleVariable>)lv).add((SymboleVariable)v) ;
                   RESULT = lv ; :}
                |
                VAR:v
                {: ArrayList<SymboleVariable> listVariables = new ArrayList();
                   listVariables.add((SymboleVariable)v) ;
                   RESULT = listVariables ; :}
                ;

VAR     ::=     TYPE:t IDF:i POINTVIRGULE
                {:
                   Symbole s = new SymboleVariable(t, i);
                   if(TDS.getInstance().getBlocActuel() == 0){
                       ((SymboleVariable)s).setDeplacement(TDS.getInstance().getDeplacement());
                       try{
                            TDS.getInstance().ajouter(new EntreeVariable(i, TDS.getInstance().getBlocActuel()), s);
                       }catch(Exception e){
                            throw new AnalyseSemantiqueException(ileft + 1, "double declaration de l'identifiant " + i);
                       }
                   }
                   RESULT = (SymboleVariable)s;
                :}
                ;

LVARLOC ::= {::} | LVAR:lv {: RESULT = lv; :};

LFONC    ::=    FONC LFONC | FONC ;

FONC     ::=    TYPE:t IDF:i {: TDS.getInstance().entreeBloc(); :} PARAM:p VARIABLES LVARLOC:lv DEBUT LINST:li FIN
                {:
                    if(lv != null){
                        for(int k = 0; k < lv.size(); k++){
                           lv.get(k).setDeplacement(TDS.getInstance().getDeplacement());
                           try{
                                TDS.getInstance().ajouter(new EntreeVariable(lv.get(k).getIdf(), TDS.getInstance().getBlocActuel()), lv.get(k));
                           }catch(Exception e){
                                throw new AnalyseSemantiqueException(ileft + 1 + k + 1, "double declaration de l'identifiant " + lv.get(k).getIdf());
                           }
                        }
                    }

                    if(p != null){
                        for(int k = 0; k < p.size(); k++){
                            p.get(k).setDeplacement(p.size()*4 + 8 - k*4); // Chainage dyna + adresse retour - it
                             try{
                                TDS.getInstance().ajouter(new EntreeVariable(p.get(k).getIdf(), TDS.getInstance().getBlocActuel()), p.get(k));
                               }catch(Exception e){
                                    throw new AnalyseSemantiqueException(ileft + 1, "double declaration de l'identifiant " + p.get(k).getIdf());
                               }
                        }
                    }

                    Symbole s = new SymboleFonction(TDS.getInstance().getBlocActuel(), t, p);
                    try{
                        TDS.getInstance().ajouter(new EntreeFonction(i, 0, p.size()), s);
                    }catch(Exception e){
                        throw new AnalyseSemantiqueException(ileft + 1, "double declaration de l'identifiant " + i);
                    }

                    ((BlocDInstructions)li).setTypeRetour(t);
                    ((BlocDInstructions)li).setNbParams(p.size());

                    Programme.getInstance().ajouterFonction((BlocDInstructions)li);
                    RESULT = li ;

                    TDS.getInstance().sortieBloc();
                :}
                ;

PARAM   ::=     PAR_OUVR LVAR:lv PAR_FERM
                {:
                    RESULT = lv;
                :}
         |      PAR_OUVR PAR_FERM
                {: RESULT = new ArrayList<>(); :};

LINSTVIDE ::=  {: RESULT = new BlocDInstructions(0, TDS.getInstance().getBlocActuel()); :} | LINST:li {: RESULT = li; :};

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1, TDS.getInstance().getBlocActuel()) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                IDF:i EQUAL EXP:e POINTVIRGULE
                {: RESULT = new Affectation(i, e, eleft + 1) ; :}
        |
                RETOURNER EXP:e POINTVIRGULE
                {: RESULT = new Retourne(e, eleft + 1) ; :}
        |
                REPETER LINST:li JUSQUA EXP:e FINREPETER
                {: RESULT = new Boucle((BlocDInstructions)li, e, lileft+ 1); :}
        |
                SI EXP:e ALORS LINSTVIDE:liAlors SINON LINST:liSinon FINSI
                {: RESULT = new Condition(e, (BlocDInstructions)liAlors, (BlocDInstructions)liSinon, eleft+1); :}
        |
                SI EXP:e ALORS LINSTVIDE:liAlors FINSI
                {: RESULT = new Condition(e, (BlocDInstructions)liAlors, new BlocDInstructions(0,TDS.getInstance().getBlocActuel()), eleft+1); :}
       ;

EXP    ::=     CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               IDF:i PAR_OUVR PAR_EFF:le PAR_FERM
               {: RESULT = new AppelFonction(i, le, ileft + 1) ; :}
        |
               IDF:i PAR_OUVR PAR_FERM
               {: RESULT = new AppelFonction(i, new ArrayList(), ileft + 1) ; :}
        |
               IDF:i
               {: RESULT = new Variable(i, ileft + 1) ; :}
        |
               CSTBOOL:c
               {: RESULT = new ConstanteBool(c, cleft + 1) ; :}
        |
               EXP:e1 DIFF EXP:e2
               {: RESULT = new Diff(e1, e2, e1left + 1); :}
        |
               EXP:e1 DOUBLEEQUAL EXP:e2
               {: RESULT = new DoubleEqual(e1, e2, e1left + 1); :}
        |
               EXP:e1 INF EXP:e2
               {: RESULT = new Inf(e1, e2, e1left + 1); :}
        |
               EXP:e1 MULT EXP:e2
               {: RESULT = new Mult(e1, e2, e1left + 1); :}
        |
               EXP:e1 PLUS EXP:e2
               {: RESULT = new Somme(e1, e2, e1left + 1); :}
        |
               MOINS EXP:e
               {: RESULT = new Moins(e, eleft + 1); :}
        |
               NON EXP:e
               {: RESULT = new Non(e, eleft + 1); :}
        |
               EXP:e1 ET EXP:e2
               {: RESULT = new Et(e1, e2, e1left + 1); :}
        |
               EXP:e1 OU EXP:e2
               {: RESULT = new Ou(e1, e2, e1left + 1); :}
        |
               PAR_OUVR EXP:e PAR_FERM
               {: RESULT = e; :}
                        ;

LEXP    ::=  LEXP:le VIRGULE EXP:e
            {: ((ArrayList<Expression>)le).add((Expression)e) ;
               RESULT = le ; :}
            |
            EXP:e
            {: ArrayList<Expression> listExpressions = new ArrayList();
               listExpressions.add((Expression)e) ;
               RESULT = listExpressions ; :}
            ;
PAR_EFF ::=  LEXP:le
            {:
              RESULT = le;
            :}
            ;